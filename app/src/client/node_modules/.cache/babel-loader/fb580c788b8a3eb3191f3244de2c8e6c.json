{"ast":null,"code":"var _jsxFileName = \"/home/karolinag/Documents/ssr2A/Self-Sovereign-Identity-4-Healthcare/client/src/App.jsx\";\nimport React, { Component } from \"react\";\nimport PatientView from './components/PatientView';\nimport DoctorView from './components/DoctorView';\nimport HealthchainContract from \"./contracts/Healthchain.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport 'open-iconic/font/css/open-iconic-bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport LogInOrRegister from \"./components/LogInOrRegister\";\nimport { doctors, patients } from './helpers/users';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      web3: null,\n      accounts: null,\n      contract: null,\n      user: null,\n      isDoctor: false,\n      accountId: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = HealthchainContract.networks[networkId];\n        const instance = new web3.eth.Contract(HealthchainContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n\n      const updateLogInFromLocalStorage = () => {\n        if (localStorage.getItem('user') === 'null') return;\n        const user = localStorage.getItem('user');\n        const isDoctor = localStorage.getItem('isDoctor') === 'true';\n        const accountId = parseInt(localStorage.getItem('accountId'));\n        this.setState({\n          user,\n          isDoctor,\n          accountId\n        });\n      };\n\n      document.addEventListener('logInSuccessful', updateLogInFromLocalStorage, false);\n      updateLogInFromLocalStorage();\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    const changeLogIn = (user, isDoctor, accountId) => {\n      localStorage.setItem('user', user);\n      localStorage.setItem('isDoctor', isDoctor);\n      localStorage.setItem('accountId', accountId);\n      this.setState({\n        user,\n        isDoctor,\n        accountId\n      });\n    };\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-warning debug-buttons\",\n      onClick: async () => {\n        changeLogIn(patients[1].name, false, patients[1].account);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Log in as patient\"), React.createElement(\"button\", {\n      className: \"btn btn-warning debug-buttons\",\n      onClick: async () => {\n        changeLogIn(doctors[1].name, true, doctors[1].account);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Log in as doctor\"), React.createElement(\"button\", {\n      className: \"btn btn-warning debug-buttons\",\n      onClick: async () => {\n        changeLogIn(null, null, null);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Log off\"), React.createElement(\"div\", {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"header-icon oi oi-grid-three-up\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), \"HEALTHCHAIN\"), this.state.user && React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Logged in as \", this.state.user)), React.createElement(\"div\", {\n      className: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, !this.state.user && !this.state.isDoctor && React.createElement(LogInOrRegister, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), this.state.user && !this.state.isDoctor && React.createElement(PatientView, {\n      accounts: this.state.accounts,\n      contract: this.state.contract,\n      accountId: this.state.accountId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), this.state.user && this.state.isDoctor && React.createElement(DoctorView, {\n      accounts: this.state.accounts,\n      contract: this.state.contract,\n      accountId: this.state.accountId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/karolinag/Documents/ssr2A/Self-Sovereign-Identity-4-Healthcare/client/src/App.jsx"],"names":["React","Component","PatientView","DoctorView","HealthchainContract","getWeb3","LogInOrRegister","doctors","patients","App","state","web3","accounts","contract","user","isDoctor","accountId","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","error","alert","console","updateLogInFromLocalStorage","localStorage","getItem","parseInt","document","addEventListener","render","changeLogIn","setItem","name","account"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PatientView from './components/PatientView'\nimport DoctorView from './components/DoctorView'\nimport HealthchainContract from \"./contracts/Healthchain.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport 'open-iconic/font/css/open-iconic-bootstrap.css'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport LogInOrRegister from \"./components/LogInOrRegister\";\nimport { doctors, patients } from './helpers/users'\n\nclass App extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    contract: null,\n    user: null,\n    isDoctor: false,\n    accountId: null\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = HealthchainContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        HealthchainContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n\n    const updateLogInFromLocalStorage = () => {\n      if (localStorage.getItem('user') === 'null') return\n      const user = localStorage.getItem('user')\n      const isDoctor = localStorage.getItem('isDoctor') === 'true'\n      const accountId = parseInt(localStorage.getItem('accountId'))\n      this.setState({ user, isDoctor, accountId })\n    }\n    document.addEventListener('logInSuccessful', updateLogInFromLocalStorage, false)\n    updateLogInFromLocalStorage()\n  };\n\n  render() {\n\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    const changeLogIn = (user, isDoctor, accountId) => {\n      localStorage.setItem('user', user)\n      localStorage.setItem('isDoctor', isDoctor)\n      localStorage.setItem('accountId', accountId)\n      this.setState({ user, isDoctor, accountId })\n    }\n\n    return (\n      <div className=\"App\">\n\n        {/* DEBUG STUFF */}\n        <button className=\"btn btn-warning debug-buttons\" onClick={async () => {\n          changeLogIn(patients[1].name, false, patients[1].account)\n        }}>Log in as patient</button>\n\n        <button className=\"btn btn-warning debug-buttons\" onClick={async () => {\n          changeLogIn(doctors[1].name, true, doctors[1].account)\n        }}>Log in as doctor</button>\n\n        <button className=\"btn btn-warning debug-buttons\" onClick={async () => {\n          changeLogIn(null, null, null)\n        }}>Log off</button>\n\n        <div className=\"card\">\n\n          <div className=\"card-header\">\n            <h1>\n              <span className=\"header-icon oi oi-grid-three-up\"></span>\n              HEALTHCHAIN\n            </h1>\n            {this.state.user &&\n              <h4>Logged in as {this.state.user}</h4>\n            }\n          </div>\n\n          <div className=\"card-body\">\n            {!this.state.user && !this.state.isDoctor &&\n              <LogInOrRegister />\n            }\n            {this.state.user && !this.state.isDoctor &&\n              <PatientView accounts={this.state.accounts} contract={this.state.contract} accountId={this.state.accountId} />\n            }\n            {this.state.user && this.state.isDoctor &&\n              <DoctorView accounts={this.state.accounts} contract={this.state.contract} accountId={this.state.accountId} />\n            }\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}