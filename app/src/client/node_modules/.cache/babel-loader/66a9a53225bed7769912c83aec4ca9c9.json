{"ast":null,"code":"var _jsxFileName = \"/home/karolinag/Documents/ssr2A/healthchain/client/src/components/PatientMedicalRecordsList.jsx\";\nimport React, { useEffect } from \"react\";\nimport download from 'downloadjs';\n\nconst getFileNameForHash = async hash => {\n  const response = await fetch('http://localhost:3001/GetFileName/' + hash);\n  const data = await response.json().catch(err => console.log(err));\n  if (!data || !data.name) return 'Upload failed. Try again later.';\n  console.log(data.name);\n  return data.name;\n};\n\nconst downloadMedicalRecord = async (medicalRecord, userAddress, patientAddress) => {\n  const name = await getFileNameForHash(medicalRecord);\n  const x = new XMLHttpRequest();\n  const url = \"http://localhost:3001/DownloadMedicalEvidence/\" + userAddress + \"/\" + patientAddress + \"/\" + medicalRecord;\n  x.open(\"GET\", url, true);\n  x.responseType = \"blob\";\n\n  x.onload = function (e) {\n    download(e.target.response, name, \"image/png\");\n  };\n\n  x.send();\n};\n\nconst PatientMedicalRecordsList = ({\n  items: medicalRecords,\n  userAddress,\n  patientAddress,\n  isDoctor = false\n}) => {\n  useEffect(() => {\n    const getNames = async id => {\n      const nameElement = document.getElementById(id);\n      const name = await getFileNameForHash(id);\n      console.log(name);\n      nameElement.innerHTML = name.replace(id + '_', '');\n    };\n\n    medicalRecords.map((medicalRecord, index) => getNames(medicalRecord));\n    /* eslint-disable-next-line */\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, !(medicalRecords && medicalRecords.length) && 'No medical records uploaded yet.', medicalRecords && medicalRecords.map((medicalRecord, index) => {\n    console.log(medicalRecord);\n    return React.createElement(\"div\", {\n      key: index,\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: medicalRecord,\n      className: \"col-lg m-1 font-weight-bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-lg m-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, medicalRecord), React.createElement(\"div\", {\n      className: \"col-lg-2 m-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: () => downloadMedicalRecord(medicalRecord, userAddress, patientAddress),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Download\")), !isDoctor && React.createElement(\"div\", {\n      className: \"col-lg-2 m-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      disabled: true,\n      className: \"btn btn-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Delete\")));\n  }));\n};\n\nexport default PatientMedicalRecordsList;","map":{"version":3,"sources":["/home/karolinag/Documents/ssr2A/healthchain/client/src/components/PatientMedicalRecordsList.jsx"],"names":["React","useEffect","download","getFileNameForHash","hash","response","fetch","data","json","catch","err","console","log","name","downloadMedicalRecord","medicalRecord","userAddress","patientAddress","x","XMLHttpRequest","url","open","responseType","onload","e","target","send","PatientMedicalRecordsList","items","medicalRecords","isDoctor","getNames","id","nameElement","document","getElementById","innerHTML","replace","map","index","length"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\"\nimport download from 'downloadjs'\n\nconst getFileNameForHash = async (hash) => {\n  const response = await fetch('http://localhost:3001/GetFileName/' + hash)\n  const data = await response.json().catch(err => console.log(err))\n  if (!data || !data.name) return 'Upload failed. Try again later.'\n  console.log(data.name)\n  return data.name\n}\n\nconst downloadMedicalRecord = async (medicalRecord, userAddress, patientAddress) => {\n  const name = await getFileNameForHash(medicalRecord)\n  const x = new XMLHttpRequest();\n  const url = \"http://localhost:3001/DownloadMedicalEvidence/\" +\n    userAddress + \"/\" +\n    patientAddress + \"/\" +\n    medicalRecord\n  x.open(\"GET\", url, true);\n  x.responseType = \"blob\";\n  x.onload = function (e) { download(e.target.response, name, \"image/png\"); };\n  x.send();\n}\n\nconst PatientMedicalRecordsList = ({ items: medicalRecords, userAddress, patientAddress, isDoctor = false }) => {\n\n  useEffect(() => {\n    const getNames = async (id) => {\n      const nameElement = document.getElementById(id)\n      const name = await getFileNameForHash(id)\n      console.log(name)\n      nameElement.innerHTML = name.replace(id + '_', '')\n    }\n    medicalRecords.map((medicalRecord, index) => getNames(medicalRecord))\n  /* eslint-disable-next-line */\n  })\n  return (\n    <div>\n      {!(medicalRecords && medicalRecords.length) &&\n        'No medical records uploaded yet.'}\n      {medicalRecords &&\n        medicalRecords.map((medicalRecord, index) => {\n          console.log(medicalRecord)\n          return <div key={index} className='row'>\n            <div id={medicalRecord} className='col-lg m-1 font-weight-bold'></div>\n            <div className='col-lg m-1'>{medicalRecord}</div>\n            <div className='col-lg-2 m-1'>\n              <button className='btn btn-primary' onClick={\n                () => downloadMedicalRecord(medicalRecord, userAddress, patientAddress)}\n              >\n                Download\n              </button>\n            </div>\n            {!isDoctor &&\n              <div className='col-lg-2 m-1'>\n                <button disabled className='btn btn-danger'>Delete</button>\n              </div>\n            }\n          </div>\n        })}\n    </div>\n  )\n}\n\nexport default PatientMedicalRecordsList;"]},"metadata":{},"sourceType":"module"}