{"ast":null,"code":"import _slicedToArray from \"/home/karolinag/Documents/ssr2A/healthchain/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/karolinag/Documents/ssr2A/healthchain/client/src/components/PatientView.jsx\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ReactDOM from 'react-dom';\nimport DoctorsList from \"./DoctorsList\";\nimport { doctors } from '../helpers/users';\nimport PatientMedicalRecordsList from \"./PatientMedicalRecordsList\";\n/**\n * Upload a document to the server and add the document hash to the smart contract.\n */\n\nconst uploadMedicalRecord = async (contract, accounts, accountId, medicalRecordInput) => {\n  const file = medicalRecordInput.files[0];\n  console.log(file);\n  const formData = new FormData();\n  formData.append(medicalRecordInput.id, file);\n  const response = await fetch('http://localhost:3001/UploadMedicalEvidence/', {\n    method: 'POST',\n    headers: {},\n    body: formData\n  });\n  const data = await response.json().catch(err => console.log(err));\n\n  try {\n    if (!data || !data.hash) return 'Upload failed. Try again later.';\n    console.log(data.hash); // Handle the success response object\n    // use call to get the value from this transaction, no changes made yet!!!\n\n    const documentIndex = await contract.methods.addDocument(data.hash).call({\n      from: accounts[accountId]\n    }); // actual changes here!!!\n\n    await contract.methods.addDocument(data.hash).send({\n      from: accounts[accountId]\n    }); // Get the value from the contract to prove it worked.\n\n    const myDocuments = await contract.methods.getDocuments(accounts[accountId]).call({\n      from: accounts[accountId],\n      gas: 100000\n    });\n    console.log(myDocuments);\n    const documentHash = myDocuments[documentIndex];\n    console.log(\"response from getDocuments\", documentHash);\n    return 'Successfully uploaded medical record \\'' + file.name + '\\' and added it to the blockchain as \\'' + documentHash + '\\'';\n  } catch (error) {\n    console.log(error); // Handle the error response object\n\n    return 'Please select a file to upload.';\n  }\n\n  ;\n};\n\nconst PatientView = ({\n  contract,\n  accounts,\n  accountId\n}) => {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        uploadResponse = _useState2[0],\n        setUploadResponse = _useState2[1];\n\n  const medicalRecordsListRef = useRef();\n  const doctorsListRef = useRef();\n  useEffect(() => {\n    async function getDocuments() {\n      const documents = await contract.methods.getDocuments(accounts[accountId]).call({\n        from: accounts[accountId],\n        gas: 100000\n      });\n      ReactDOM.render(React.createElement(PatientMedicalRecordsList, {\n        items: documents,\n        userAddress: accounts[accountId],\n        patientAddress: accounts[accountId],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), medicalRecordsListRef.current);\n    }\n\n    getDocuments();\n    /* eslint-disable-next-line */\n  }, [uploadResponse]);\n  useEffect(() => {\n    const getDoctors = async () => {\n      await doctors.map(async (doctor, index) => {\n        const permissions = await contract.methods.getDoctorsPermissions(accounts[doctor.account]).call({\n          from: accounts[accountId],\n          gas: 100000\n        });\n        doctors[index].hasAccess = permissions.includes(accounts[accountId]);\n      });\n      setTimeout(() => {\n        console.log(doctors[0].hasAccess);\n        ReactDOM.render(React.createElement(DoctorsList, {\n          doctors: doctors,\n          contract: contract,\n          accounts: accounts,\n          accountId: accountId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }), doctorsListRef.current);\n      }, 300);\n    };\n\n    getDoctors();\n    /* eslint-disable-next-line */\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Upload a medical record\"), React.createElement(\"div\", {\n    className: \"input-group mb-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"file\",\n    className: \"form-control-file\",\n    id: \"medicalRecord\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    onClick: async () => {\n      const message = await uploadMedicalRecord(contract, accounts, accountId, document.getElementById('medicalRecord'));\n      setUploadResponse(message);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"upload\"), uploadResponse && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, uploadResponse), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Manage permissions\"), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"If you give access to a doctor, the doctor is able to view all your medical records.\"), React.createElement(\"div\", {\n    ref: doctorsListRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Manage your medical records\"), React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"View or delete your medical records.\"), React.createElement(\"div\", {\n    ref: medicalRecordsListRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }));\n};\n\nexport default PatientView;","map":{"version":3,"sources":["/home/karolinag/Documents/ssr2A/healthchain/client/src/components/PatientView.jsx"],"names":["React","useState","useEffect","useRef","ReactDOM","DoctorsList","doctors","PatientMedicalRecordsList","uploadMedicalRecord","contract","accounts","accountId","medicalRecordInput","file","files","console","log","formData","FormData","append","id","response","fetch","method","headers","body","data","json","catch","err","hash","documentIndex","methods","addDocument","call","from","send","myDocuments","getDocuments","gas","documentHash","name","error","PatientView","uploadResponse","setUploadResponse","medicalRecordsListRef","doctorsListRef","documents","render","current","getDoctors","map","doctor","index","permissions","getDoctorsPermissions","account","hasAccess","includes","setTimeout","message","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\"\nimport ReactDOM from 'react-dom'\nimport DoctorsList from \"./DoctorsList\"\nimport { doctors } from '../helpers/users'\nimport PatientMedicalRecordsList from \"./PatientMedicalRecordsList\"\n\n/**\n * Upload a document to the server and add the document hash to the smart contract.\n */\nconst uploadMedicalRecord = async (contract, accounts, accountId, medicalRecordInput) => {\n  const file = medicalRecordInput.files[0]\n  console.log(file)\n  const formData = new FormData()\n  formData.append(medicalRecordInput.id, file)\n  const response = await fetch('http://localhost:3001/UploadMedicalEvidence/', {\n    method: 'POST',\n    headers: {\n    },\n    body: formData\n  })\n  const data = await response.json().catch(err => console.log(err))\n  try {\n    if (!data || !data.hash) return 'Upload failed. Try again later.'\n    console.log(data.hash) // Handle the success response object\n\n    // use call to get the value from this transaction, no changes made yet!!!\n    const documentIndex = await contract.methods.addDocument(data.hash).call({ from: accounts[accountId] });\n    // actual changes here!!!\n    await contract.methods.addDocument(data.hash).send({ from: accounts[accountId] });\n    // Get the value from the contract to prove it worked.\n    const myDocuments = await contract.methods.getDocuments(accounts[accountId]).call({ from: accounts[accountId], gas: 100000 });\n    console.log(myDocuments)\n    const documentHash = myDocuments[documentIndex];\n    console.log(\"response from getDocuments\", documentHash)\n    return 'Successfully uploaded medical record \\'' + file.name + '\\' and added it to the blockchain as \\'' + documentHash + '\\''\n  }\n  catch (error) {\n    console.log(error) // Handle the error response object\n    return 'Please select a file to upload.'\n  };\n}\n\nconst PatientView = ({ contract, accounts, accountId }) => {\n  const [uploadResponse, setUploadResponse] = useState()\n\n  const medicalRecordsListRef = useRef()\n  const doctorsListRef = useRef()\n\n  useEffect(() => {\n    async function getDocuments() {\n      const documents = await contract.methods.getDocuments(accounts[accountId]).call({ from: accounts[accountId], gas: 100000 })\n      ReactDOM.render(\n        <PatientMedicalRecordsList\n          items={documents}\n          userAddress={accounts[accountId]}\n          patientAddress={accounts[accountId]} />,\n        medicalRecordsListRef.current\n      )\n    }\n    getDocuments()\n    /* eslint-disable-next-line */\n  }, [uploadResponse])\n\n  useEffect(() => {\n    const getDoctors = async () => {\n      await doctors.map(async (doctor, index) => {\n        const permissions = await contract.methods.getDoctorsPermissions(accounts[doctor.account]).call({ from: accounts[accountId], gas: 100000 })\n        doctors[index].hasAccess = permissions.includes(accounts[accountId])\n      })\n      setTimeout(() => {\n        console.log(doctors[0].hasAccess)\n        ReactDOM.render(\n          <DoctorsList doctors={doctors}\n            contract={contract}\n            accounts={accounts}\n            accountId={accountId}>\n          </DoctorsList>,\n          doctorsListRef.current\n        )\n      }, 300);\n    }\n    getDoctors()\n    /* eslint-disable-next-line */\n  }, [])\n\n  return (<div>\n    <h2>Upload a medical record</h2>\n    <div className=\"input-group mb-3\">\n      <input type=\"file\" className=\"form-control-file\" id=\"medicalRecord\"></input>\n    </div>\n    <button className=\"btn btn-primary\" onClick={async () => {\n      const message = await uploadMedicalRecord(contract, accounts, accountId, document.getElementById('medicalRecord'))\n      setUploadResponse(message)\n    }}>upload</button>\n    {uploadResponse &&\n      <div>{uploadResponse}</div>\n    }\n\n    <hr />\n    <h2>Manage permissions</h2>\n    <h5>If you give access to a doctor, the doctor is able to view all your medical records.</h5>\n    <div ref={doctorsListRef}></div>\n\n    <h2>Manage your medical records</h2>\n    <h5>View or delete your medical records.</h5>\n    <div ref={medicalRecordsListRef}></div>\n  </div>\n  )\n}\n\nexport default PatientView;"]},"metadata":{},"sourceType":"module"}