{"ast":null,"code":"import Web3 from \"web3\";\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener(\"load\", async () => {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n\n      try {\n        // Request account access if needed\n        await window.ethereum.enable(); // Acccounts now exposed\n\n        console.log(\"web3 window.ethereum.\");\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      } // Fallback to localhost; use dev console port by default...\n      else {\n          const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\");\n          const web3 = new Web3(provider);\n          console.log(\"No web3 instance injected, using Local web3.\");\n          resolve(web3);\n        }\n  });\n});\n\nexport default getWeb3;","map":{"version":3,"sources":["/home/karolinag/Documents/ssr2A/Self-Sovereign-Identity-4-Healthcare/client/src/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","enable","console","log","error","provider","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,OAAO,GAAG,MACd,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B;AACAC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C;AACA,QAAID,MAAM,CAACE,QAAX,EAAqB;AACnB,YAAMC,IAAI,GAAG,IAAIR,IAAJ,CAASK,MAAM,CAACE,QAAhB,CAAb;;AACA,UAAI;AACF;AACA,cAAMF,MAAM,CAACE,QAAP,CAAgBE,MAAhB,EAAN,CAFE,CAGF;;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAR,QAAAA,OAAO,CAACK,IAAD,CAAP;AACD,OAND,CAME,OAAOI,KAAP,EAAc;AACdR,QAAAA,MAAM,CAACQ,KAAD,CAAN;AACD;AACF,KAXD,CAYA;AAZA,SAaK,IAAIP,MAAM,CAACG,IAAX,EAAiB;AACpB;AACA,cAAMA,IAAI,GAAGH,MAAM,CAACG,IAApB;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAR,QAAAA,OAAO,CAACK,IAAD,CAAP;AACD,OALI,CAML;AANK,WAOA;AACH,gBAAMK,QAAQ,GAAG,IAAIb,IAAI,CAACc,SAAL,CAAeC,YAAnB,CACf,uBADe,CAAjB;AAGA,gBAAMP,IAAI,GAAG,IAAIR,IAAJ,CAASa,QAAT,CAAb;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAR,UAAAA,OAAO,CAACK,IAAD,CAAP;AACD;AACF,GA9BD;AA+BD,CAjCD,CADF;;AAoCA,eAAeP,OAAf","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          console.log(\"web3 window.ethereum.\");\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}